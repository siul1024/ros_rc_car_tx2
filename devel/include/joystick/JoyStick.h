// Generated by gencpp from file joystick/JoyStick.msg
// DO NOT EDIT!


#ifndef JOYSTICK_MESSAGE_JOYSTICK_H
#define JOYSTICK_MESSAGE_JOYSTICK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace joystick
{
template <class ContainerAllocator>
struct JoyStick_
{
  typedef JoyStick_<ContainerAllocator> Type;

  JoyStick_()
    : steering(0.0)
    , throttle(0.0)
    , brake(false)  {
    }
  JoyStick_(const ContainerAllocator& _alloc)
    : steering(0.0)
    , throttle(0.0)
    , brake(false)  {
  (void)_alloc;
    }



   typedef float _steering_type;
  _steering_type steering;

   typedef float _throttle_type;
  _throttle_type throttle;

   typedef uint8_t _brake_type;
  _brake_type brake;





  typedef boost::shared_ptr< ::joystick::JoyStick_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::joystick::JoyStick_<ContainerAllocator> const> ConstPtr;

}; // struct JoyStick_

typedef ::joystick::JoyStick_<std::allocator<void> > JoyStick;

typedef boost::shared_ptr< ::joystick::JoyStick > JoyStickPtr;
typedef boost::shared_ptr< ::joystick::JoyStick const> JoyStickConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::joystick::JoyStick_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::joystick::JoyStick_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace joystick

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'joystick': ['/home/work/git/ros_rc_car_tx2/src/joystick/msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::joystick::JoyStick_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::joystick::JoyStick_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::joystick::JoyStick_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::joystick::JoyStick_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::joystick::JoyStick_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::joystick::JoyStick_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::joystick::JoyStick_<ContainerAllocator> >
{
  static const char* value()
  {
    return "74d0717dbec8219b6d54e7c43afb3fa6";
  }

  static const char* value(const ::joystick::JoyStick_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x74d0717dbec8219bULL;
  static const uint64_t static_value2 = 0x6d54e7c43afb3fa6ULL;
};

template<class ContainerAllocator>
struct DataType< ::joystick::JoyStick_<ContainerAllocator> >
{
  static const char* value()
  {
    return "joystick/JoyStick";
  }

  static const char* value(const ::joystick::JoyStick_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::joystick::JoyStick_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 steering\n"
"float32 throttle\n"
"bool brake\n"
;
  }

  static const char* value(const ::joystick::JoyStick_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::joystick::JoyStick_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.steering);
      stream.next(m.throttle);
      stream.next(m.brake);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct JoyStick_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::joystick::JoyStick_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::joystick::JoyStick_<ContainerAllocator>& v)
  {
    s << indent << "steering: ";
    Printer<float>::stream(s, indent + "  ", v.steering);
    s << indent << "throttle: ";
    Printer<float>::stream(s, indent + "  ", v.throttle);
    s << indent << "brake: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.brake);
  }
};

} // namespace message_operations
} // namespace ros

#endif // JOYSTICK_MESSAGE_JOYSTICK_H
